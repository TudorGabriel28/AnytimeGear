// <auto-generated />
using System;
using AnytimeGear.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnytimeGear.Server.Migrations;

[DbContext(typeof(AnytimeGearServerContext))]
[Migration("20240410114236_InitialCreate")]
partial class InitialCreate
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.4")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("AnytimeGear.Server.Models.Address", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("City")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("County")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Street")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Address");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.Category", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Category");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.Product", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Brand")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Model")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<short>("Price")
                    .HasColumnType("smallint");

                b.Property<short>("Quantity")
                    .HasColumnType("smallint");

                b.Property<short>("ReplacementValue")
                    .HasColumnType("smallint");

                b.Property<int>("SubCategoryId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("SubCategoryId");

                b.ToTable("Product");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.Rental", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<bool>("Completed")
                    .HasColumnType("bit");

                b.Property<DateTime>("EndPeriod")
                    .HasColumnType("datetime2");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<DateTime>("StartPeriod")
                    .HasColumnType("datetime2");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.HasIndex("UserId");

                b.ToTable("Rental");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.SubCategory", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("CategoryId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.ToTable("SubCategory");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<bool>("Activated")
                    .HasColumnType("bit");

                b.Property<string>("ActivationToken")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("Phone")
                    .HasColumnType("int");

                b.Property<string>("ProfilePicture")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Role")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("User");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.Address", b =>
            {
                b.HasOne("AnytimeGear.Server.Models.User", "User")
                    .WithMany("Addresses")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.Product", b =>
            {
                b.HasOne("AnytimeGear.Server.Models.SubCategory", "SubCategory")
                    .WithMany()
                    .HasForeignKey("SubCategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("SubCategory");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.Rental", b =>
            {
                b.HasOne("AnytimeGear.Server.Models.Product", "Product")
                    .WithMany("Rentals")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("AnytimeGear.Server.Models.User", "User")
                    .WithMany("Rentals")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Product");

                b.Navigation("User");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.SubCategory", b =>
            {
                b.HasOne("AnytimeGear.Server.Models.Category", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.Product", b =>
            {
                b.Navigation("Rentals");
            });

        modelBuilder.Entity("AnytimeGear.Server.Models.User", b =>
            {
                b.Navigation("Addresses");

                b.Navigation("Rentals");
            });
#pragma warning restore 612, 618
    }
}
